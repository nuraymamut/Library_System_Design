// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package Diagrama_Clase;


import java.util.Arrays;

public class Imprumut {

    private int idImprumut;
    private int[] idCarti;
    private String dataRetur;
    private boolean imprumutActiv;
    private final static int CARTI_MAX = 5;

    public Imprumut(int[] idCarti) {
        this.idCarti = idCarti;
    }

    // Setters
    public void setImprumutActiv(boolean imprumutActiv) {
        this.imprumutActiv = imprumutActiv;
    }


    public void setIdCarti(int nrCarti) {
        int[] carti = new int[nrCarti];
        int aux = 0;

        for (int i = 0; i < idCarti.length; i++) {
            if (idCarti[i] != 0) {
                carti[aux++] = idCarti[i];
            }
        }
        idCarti = carti;
    }

    public void setDataRetur(String data) {
        dataRetur = data;
    }

    public void setIdImprumut(int idImprumut) {
        this.idImprumut = idImprumut;
    }

    // Getters
    public int getIdImprumut() {
        return idImprumut;
    }

    public int[] getIdCarti() {
        return idCarti;
    }

    public String getDataRetur() {
        return dataRetur;
    }

    public boolean isImprumutActiv() {
        return imprumutActiv;
    }

    public int imprumutNou(int cartiNeret, boolean isValid, Catalog catalog, Bibliotecar bibliotecar) {
        int cartiValide = 0;

        for (int i = 0; i < idCarti.length; i++) {
            if (catalog.verificareStatusCarte(idCarti[i]) && cartiValide <= CARTI_MAX) {
                cartiValide++;
            } else {
                idCarti[i] = 0;
            }
        }
        // daca nicio carte nu este disponibila procesul se opreste
        if (cartiValide == 0) {
            System.out.println("Nicio carte nu este disponibila");
            return 0;
        } else { // se verifica penalizarile clientului si cate carti nereturnate are
            int nrCartiImpr = verifiacareImprumut(cartiNeret, isValid, cartiValide);
            if (nrCartiImpr != 0) { // se updateaza cartile ramase dupa verificari
                for (int i = 0; i < idCarti.length; i++) {
                    if (idCarti[i] != 0) {
                        bibliotecar.updateazaStatusCarte(idCarti[i]);
                    }
                }
                idImprumut = bibliotecar.adaugaIdImpr();
                dataRetur = bibliotecar.adugareDataRetur();
                imprumutActiv = true;
                setIdCarti(nrCartiImpr);
            }
            return nrCartiImpr;
        }
    }

    public int verifiacareImprumut(int cartiNeret, boolean isValid, int cartiValide) {
        // daca numarul de carti pe care le-a imprumutat deja depaseste nr. max de carti
        // pe care le poate imprumuta procesul se termina
        if (cartiNeret == CARTI_MAX){
            System.out.println("Limita imprumuturi depasita");
            return 0;
        } else if (!isValid) { // daca permisul e invalid => are penalizare si nu poate imprumuta carti
            System.out.println("Penalizare");
            return 0;
        } else if (cartiNeret + cartiValide > CARTI_MAX) { // daca suma cartilor pe care
            // vrea sa le imprumute si cartile nereturnate este mai mare decat nr. max carti
            // se scade din numarul cartilor din imprumutul curent
            int cartiTotal = cartiNeret + cartiValide;
            for (int i = idCarti.length - 1; i >= 0; i--) {
                if (cartiTotal > CARTI_MAX  && idCarti[i] != 0) {
                    idCarti[i] = 0;
                    cartiTotal--;
                }
            }
            return cartiTotal - cartiNeret;
        }
        return cartiValide;
    }

    public void afisare() {
        System.out.println("idImprumut: " + idImprumut);
        System.out.println("idCarti: " + Arrays.toString(idCarti));
        System.out.println("data retur: " + dataRetur + "\n");
    }

};
